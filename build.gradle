/*
 * ProxyDiscord, a Velocity Discord bot
 * Copyright (c) 2021 James Lyne
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

rootProject.ext.mavenUserName=""
rootProject.ext.mavenPassword=""

if (file("./build.gradle.local").exists()) {
    apply from: "./build.gradle.local"
}

sourceSets {
    main {
        java {
            srcDirs= ["./src/java"]
        }
        resources {
            srcDirs= ["./src/resources"]
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo.not-null.co.uk/releases/' }
        maven { url 'https://repo.not-null.co.uk/snapshots/' }
        maven { url 'https://repo.minebench.de/' }
        maven { url "https://papermc.io/repo/repository/maven-public/" }
    }

    group = 'uk.co.notnull'
    version = '1.1-SNAPSHOT'
    description = 'Velocity Discord integration solution'

    java.sourceCompatibility = JavaVersion.VERSION_17
    java.targetCompatibility = JavaVersion.VERSION_17

    compileJava {
        options.compilerArgs += ["-Xlint:all", "-Xlint:-processing"]
        options.encoding = 'UTF-8'
    }
}

dependencies {
    implementation project(":ProxyDiscordAPI")
    implementation 'org.javacord:javacord:3.5.0'
    implementation 'cloud.commandframework:cloud-velocity:1.7.1'
    implementation 'cloud.commandframework:cloud-minecraft-extras:1.7.1'
    implementation 'cloud.commandframework:cloud-annotations:1.7.1'
    implementation 'dev.vankka:mcdiscordreserializer:4.3.0'

    compileOnly 'net.luckperms:api:5.4'
    compileOnly 'com.velocitypowered:velocity-api:3.1.2-SNAPSHOT'
    compileOnly 'uk.co.notnull:PlatformDetection-velocity:2.0'
    compileOnly 'uk.co.notnull:SuperVanishBridge-api:1.0-SNAPSHOT'

    annotationProcessor 'com.velocitypowered:velocity-api:3.1.2-SNAPSHOT'
}

tasks {
    processResources {
        from("${project.rootDir}/src/main/resources") {
            project.properties.findAll().each {
                prop ->
                    if (prop.value != null && prop.value instanceof java.lang.String) {
                        filter(ReplaceTokens, tokens: [(prop.key): prop.value])
                        filter(ReplaceTokens, tokens: [('project.' + prop.key): prop.value])
                    }
            }
        }
    }

    build {
        dependsOn(shadowJar)
    }

    shadowJar {
        archiveClassifier.set('')
        relocate 'cloud.commandframework', 'uk.co.notnull.proxydiscord.shaded.cloud'
        relocate 'io.leangen.geantyref', 'uk.co.notnull.proxydiscord.shaded.typetoken'
    }
}
